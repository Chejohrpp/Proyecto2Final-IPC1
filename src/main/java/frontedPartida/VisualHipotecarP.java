/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frontedPartida;

import Casillas.*;
import funcionalidades.*;
import javax.swing.JOptionPane;

/**
 *
 * @author chejohrpp
 */
public class VisualHipotecarP extends javax.swing.JFrame {
    private Jugadores jugador;
    private CasillaPropiedad propiedadHipotecada;
    
    private Tablero[] tablero;
    private String[] grupoPropiedades;
    private int[] cantGP;

    private int[] cantGPJ;
    /**
     * Creates new form VisualHipotecarP
     */
    public VisualHipotecarP(Jugadores jugador, Tablero[] tablero, String[] propiedades) {        
        this.jugador = jugador;
        this.tablero = tablero;
        this.grupoPropiedades = propiedades;
        initComponents();
        lblcostoH.setVisible(false);
        cmbHipotecaP.setSelectedIndex(-1);   
        verificar();
        generarLugar();
        generarOtras();
        
        
    }
        //agrega las propiedades no hipotecadas para hipotecar
        private void generarLugar(){
        //cuenta cuantas casilla tiene el jugador de cada grupo de propiedades
        if (jugador.getCantPropiedades() != 0) {
            cantGPJ = new int[grupoPropiedades.length];
            for (int i = 0; i < jugador.getPropiedades().length; i++) {
                CasillaPropiedad propiedad = (CasillaPropiedad) jugador.getPropiedades()[i];
                if (propiedad.getCasillaLugar() != null) {
                    for (int j = 0; j < grupoPropiedades.length; j++) {
                        if (propiedad.getCasillaLugar().getGrupoPropiedad().equalsIgnoreCase(grupoPropiedades[j])) {
                            cantGPJ[j]++;
                            //System.out.println(cantGPJ[j]);
                        }
                    }
                }
            }
            //agrega todas las propiedades del grupo completo solo si el jugador las tiene en su coleccion
            for (int i = 0; i < grupoPropiedades.length; i++) {
                if (cantGPJ[i] == cantGP[i]) {
                    for (int j = 0; j < tablero.length; j++) {
                        if (tablero[j].getCasilla() instanceof CasillaPropiedad) {
                            CasillaPropiedad propiedad = (CasillaPropiedad) tablero[j].getCasilla();
                            if (propiedad.getCasillaLugar() != null) {
                                if (propiedad.getCasillaLugar().getGrupoPropiedad().equalsIgnoreCase(grupoPropiedades[i]) && propiedad.getCasillaLugar().getCantCasas() == 0 &&
                                        propiedad.getCasillaLugar().getCantHoteles() == 0 && propiedad.isEstadoHipoteca() == false) {
                                    cmbHipotecaP.addItem(propiedad.getNombre());
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    private void generarOtras(){
        if (jugador.getCantPropiedades() != 0) {
            for (int i = 0; i < jugador.getPropiedades().length; i++) {
                if (jugador.getPropiedades()[i].getCasillaLugar() == null && jugador.getPropiedades()[i].isEstadoHipoteca() == false) {
                    cmbHipotecaP.addItem(jugador.getPropiedades()[i].getNombre());
                }
            }
        }
    }
    //verifica la cantidad de propiedades de cada grupo en el tablero
    private void verificar(){
        cantGP = new int[grupoPropiedades.length];
        for (int i = 0; i < tablero.length; i++) {
            if (tablero[i].getCasilla() instanceof CasillaPropiedad) {
                CasillaPropiedad propiedad = (CasillaPropiedad) tablero[i].getCasilla();
                if (propiedad.getCasillaLugar() != null) {
                    for (int j = 0; j < grupoPropiedades.length; j++) {
                        if (propiedad.getCasillaLugar().getGrupoPropiedad().equalsIgnoreCase(grupoPropiedades[j])) {
                            cantGP[j]++;
                        }
                    }
                }
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cmbHipotecaP = new javax.swing.JComboBox<>();
        btnAceptar = new javax.swing.JButton();
        lblcostoH = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel1.setText("Que propiedad desea hipotecar");

        cmbHipotecaP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbHipotecaPActionPerformed(evt);
            }
        });

        btnAceptar.setText("Aceptar");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        lblcostoH.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        lblcostoH.setText("Costo de hipoteca: 000");

        jLabel2.setText("Nota: solo se visualizaran las propiedades donde puedes hipotecar");

        jLabel3.setText("Solo se puede hipotecar cuando tienes todas las propiedades de un tipo");

        jLabel4.setText("y no tienes ningun edificio");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(233, 233, 233)
                        .addComponent(btnAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(182, 182, 182)
                        .addComponent(lblcostoH)))
                .addContainerGap(94, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(cmbHipotecaP, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(140, 140, 140))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addComponent(cmbHipotecaP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(lblcostoH)
                .addGap(42, 42, 42)
                .addComponent(btnAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbHipotecaPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbHipotecaPActionPerformed
        // TODO add your handling code here:
        if (cmbHipotecaP.getSelectedItem() != null) {
            for (int i = 0; i < jugador.getPropiedades().length ;  i++) {
            if (cmbHipotecaP.getSelectedItem().toString().equalsIgnoreCase( jugador.getPropiedades()[i].getNombre())) {
                    lblcostoH.setText("el precio de la hipoteca es de : " + jugador.getPropiedades()[i].getPrecioHipoteca());
                    lblcostoH.setVisible(true);
                    propiedadHipotecada = jugador.getPropiedades()[i];
                }
            }
        }
        
    }//GEN-LAST:event_cmbHipotecaPActionPerformed

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        // TODO add your handling code here:
        if(cmbHipotecaP.getSelectedIndex() != -1){
            int opcion = JOptionPane.showConfirmDialog(null, "Â¿Esta seguro que desea hipoteca esta propiedad?");
            if (opcion == JOptionPane.YES_OPTION) {
                propiedadHipotecada.setEstadoHipoteca(true);
                jugador.setRiqueza(jugador.getRiqueza() + propiedadHipotecada.getPrecioHipoteca());
                jugador.setRiquezaTotal(jugador.getRiquezaTotal()- propiedadHipotecada.getCosto());
                JOptionPane.showMessageDialog(null, "Propiedad Hipotecada \n Recuerda presionar el boton de actualizar para ver su nuevo saldo");
                this.setVisible(false);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No ha selecionado nada");
        }
    }//GEN-LAST:event_btnAceptarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JComboBox<String> cmbHipotecaP;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lblcostoH;
    // End of variables declaration//GEN-END:variables
}
